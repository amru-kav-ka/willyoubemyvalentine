this is my current webpage 

index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valentine's Question</title>
    <link rel="stylesheet" href="styles.css">
    <audio id="celebrationSound" src="celebration.mp3"></audio>
</head>
<body>
    <div class="container" id="landing">
        <img src="first.gif" alt="Valentine GIF" class="gif" id="mainGif">
        <h1 class="question" id="mainQuestion">Will you be my valentine?</h1>
        <div class="buttons">
            <button class="btn yes-btn" id="yesBtn">Yes</button>
            <button class="btn no-btn" id="noBtn">No</button>
        </div>
    </div>
    <div class="container" id="acceptance" style="display: none;">
        <canvas id="fireworksCanvas"></canvas>
        <img src="second.gif" alt="Celebration GIF" class="gif">
        <h1 class="question">I knew you would say yes, cutu.</h1>
        <div id="countdown"></div>
    </div>
    <script src="script.js"></script>
</body>
</html>

styles.css
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
    cursor: url('heart.cur'), auto;
}

body {
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
    transition: background 0.5s ease;
}

.container {
    text-align: center;
    padding: 2rem;
    max-width: 600px;
    position: relative;
    z-index: 1;
}

.gif {
    width: 200px;
    margin-bottom: 2rem;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
}

.question {
    color: white;
    margin-bottom: 2rem;
    font-size: 2rem;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    position: relative;
}

.btn {
    padding: 1rem 2rem;
    border: none;
    border-radius: 25px;
    font-size: 1.2rem;
    cursor: url('heart.cur'), pointer;
    transition: all 0.3s ease;
}

.yes-btn {
    background-color: #4CAF50;
    color: white;
}

.no-btn {
    background-color: #f44336;
    color: white;
    transition: all 0.3s ease;
}

#fireworksCanvas {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 0;
}

#countdown {
    color: white;
    font-size: 1.5rem;
    margin-top: 2rem;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

@media (max-width: 600px) {
    .question {
        font-size: 1.5rem;
    }
    .btn {
        padding: 0.8rem 1.5rem;
        font-size: 1rem;
    }
    .gif {
        width: 150px;
    }
}

script.js
const landingPage = document.getElementById('landing');
const acceptancePage = document.getElementById('acceptance');
const yesBtn = document.getElementById('yesBtn');
const noBtn = document.getElementById('noBtn');
const mainGif = document.getElementById('mainGif');
const mainQuestion = document.getElementById('mainQuestion');
const countdown = document.getElementById('countdown');
let clickCount = 0;

// Fireworks initialization
const canvas = document.getElementById("fireworksCanvas");
const ctx = canvas.getContext("2d");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

window.addEventListener("resize", () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
});

class Firework {
    constructor() {
        this.x = Math.random() * canvas.width;
        this.y = canvas.height;
        this.sx = Math.random() * 3 - 1.5;
        this.sy = Math.random() * -3 - 3;
        this.size = Math.random() * 2 + 1;
        const colorVal = Math.round(0xffffff * Math.random());
        [this.r, this.g, this.b] = [colorVal >> 16, (colorVal >> 8) & 255, colorVal & 255];
        this.shouldExplode = false;
    }
    update() {
        this.shouldExplode = this.sy >= -2 || this.y <= 100 || this.x <= 0 || this.x >= canvas.width;
        this.sy += 0.01;
        [this.x, this.y] = [this.x + this.sx, this.y + this.sy];
    }
    draw() {
        ctx.fillStyle = `rgb(${this.r},${this.g},${this.b})`;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
    }
}

class Particle {
    constructor(x, y, r, g, b) {
        [this.x, this.y, this.sx, this.sy, this.r, this.g, this.b] = [x, y, Math.random() * 3 - 1.5, Math.random() * 3 - 1.5, r, g, b];
        this.size = Math.random() * 2 + 1;
        this.life = 100;
    }
    update() {
        [this.x, this.y, this.life] = [this.x + this.sx, this.y + this.sy, this.life - 1];
    }
    draw() {
        ctx.fillStyle = `rgba(${this.r}, ${this.g}, ${this.b}, ${this.life / 100})`;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
    }
}

const fireworks = [new Firework()];
const particles = [];

function animateFireworks() {
    ctx.fillStyle = "rgba(0, 0, 0, 0.2)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    Math.random() < 0.25 && fireworks.push(new Firework());
    fireworks.forEach((firework, i) => {
        firework.update();
        firework.draw();
        if (firework.shouldExplode) {
            for (let j = 0; j < 50; j++) particles.push(new Particle(firework.x, firework.y, firework.r, firework.g, firework.b));
            fireworks.splice(i, 1);
        }
    });
    particles.forEach((particle, i) => {
        particle.update();
        particle.draw();
        if (particle.life <= 0) particles.splice(i, 1);
    });
    requestAnimationFrame(animateFireworks);
}

// Countdown timer
const valentinesDay = new Date('February 14, 2025 00:00:00').getTime();
setInterval(() => {
    const now = new Date().getTime();
    const distance = valentinesDay - now;
    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
    countdown.textContent = `${days} days until Valentine's Day!`;
}, 1000);

// Event listeners
yesBtn.addEventListener('click', () => {
    landingPage.style.display = 'none';
    acceptancePage.style.display = 'block';
    document.body.style.background = '#1a1a1a';
    document.getElementById('celebrationSound').play();
    animateFireworks();
});

noBtn.addEventListener('mouseover', () => {
    const x = Math.random() * (window.innerWidth - noBtn.offsetWidth);
    const y = Math.random() * (window.innerHeight - noBtn.offsetHeight);
    noBtn.style.position = 'absolute';
    noBtn.style.left = `${x}px`;
    noBtn.style.top = `${y}px`;
});

noBtn.addEventListener('click', () => {
    clickCount++;
    
    // Update GIF and text based on click count
    switch(clickCount) {
        case 1:
            mainGif.src = 'gif1.gif';
            mainQuestion.textContent = 'Please click Yes';
            break;
        case 2:
            mainGif.src = 'gif2.gif';
            mainQuestion.textContent = 'I will be very sad please click Yes';
            break;
        case 3:
            mainGif.src = 'gif3.gif';
            mainQuestion.textContent = 'Pretty please?';
            noBtn.style.display = 'none';
            yesBtn.style.width = '100%';
            yesBtn.style.borderRadius = '50px';
            break;
    }
    
    // Increase Yes button size
    const currentSize = parseFloat(window.getComputedStyle(yesBtn).fontSize);
    yesBtn.style.fontSize = `${currentSize * 1.2}px`;
});
make some changes to this and rewrite the entire code alright
1. the fireworks animation is filling the entire screen i want the black background in the fireworks to be transparent so that the text i knew you would say yes cutu and the gif is visible at the end with a beautiful background color
2. i made this in such a way that whenever a user tries to click no the no button will move but make sure the no button only moves 2 times not more than that

